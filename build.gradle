plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'maven-publish'
}

apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${project.mod_version_nick}-${project.minecraft_version}"
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven' }
    maven {
        name = 'sonatype-oss'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven { url 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

shadowJar {
    classifier = "shadow"
    configurations = [project.configurations.shadow]
}

loom {
    customManifest = "https://gist.githubusercontent.com/modmuss50/6e00baf80dcbaa42f3a2fc846b290128/raw/f035ef8f75164f56ec6352809a34841d326bae1c/1_18_experimental-snapshot-1.json"
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Configurate
    implementation "org.spongepowered:configurate-hocon:${project.configurate_version}"
    shadow "org.spongepowered:configurate-hocon:${project.configurate_version}"

    //Adventure
    implementation "net.kyori:adventure-text-minimessage:${project.kyori_adventure_minimessage_version}"
    shadow "net.kyori:adventure-text-minimessage:${project.kyori_adventure_minimessage_version}"

    implementation "net.kyori:adventure-text-serializer-gson:${project.kyori_adventure_serializer_version}"
    shadow "net.kyori:adventure-text-serializer-gson:${project.kyori_adventure_serializer_version}"

    //Luckperms
    implementation "net.luckperms:api:${project.luckperms_version}"

    //Other
    implementation "com.googlecode.json-simple:json-simple:${project.json_simple}"
    shadow "com.googlecode.json-simple:json-simple:${project.json_simple}"

    implementation "javax.xml.bind:jaxb-api:${project.jaxb_api}"
    shadow "javax.xml.bind:jaxb-api:${project.jaxb_api}"

}

task remapJar(type: net.fabricmc.loom.task.RemapJarTask, overwrite: true) {
    from zipTree(shadowJar.archiveFile) dependsOn shadowJar
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}